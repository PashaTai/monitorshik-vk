#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
VK Comment Monitor - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –ø—É–±–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –≤ Telegram
"""

import os
import time
import re
from datetime import datetime
from typing import Optional, List, Dict, Any
import requests
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ .env
VK_ACCESS_TOKEN = os.getenv('VK_ACCESS_TOKEN')
VK_GROUP_ID = os.getenv('VK_GROUP_ID')
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
POSTS_TO_CHECK = int(os.getenv('POSTS_TO_CHECK', '10'))
COMMENTS_PER_POST = int(os.getenv('COMMENTS_PER_POST', '20'))
CHECK_INTERVAL = int(os.getenv('CHECK_INTERVAL', '60'))
REQUEST_DELAY = float(os.getenv('REQUEST_DELAY', '0.4'))
CACHE_LIMIT = int(os.getenv('CACHE_LIMIT', '1000'))

# VK API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
VK_API_VERSION = '5.131'
VK_API_BASE = 'https://api.vk.com/method/'

# In-memory –∫—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
seen_comments = set()

# –§–ª–∞–≥ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (–¥–ª—è —É–º–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
is_first_run = True


def log(message: str, level: str = 'INFO'):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    print(f'[{timestamp}] [{level}] {message}')


def vk_api_call(method: str, params: Dict[str, Any]) -> Optional[Dict]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ VK API –º–µ—Ç–æ–¥–æ–≤
    
    Args:
        method: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ API (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'wall.get')
        params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    
    Returns:
        –û—Ç–≤–µ—Ç API –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    params['access_token'] = VK_ACCESS_TOKEN
    params['v'] = VK_API_VERSION
    
    url = f'{VK_API_BASE}{method}'
    
    try:
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        
        data = response.json()
        
        if 'error' in data:
            error = data['error']
            log(f"VK API Error: {error.get('error_msg', 'Unknown error')} (code: {error.get('error_code')})", 'ERROR')
            return None
        
        return data.get('response')
    
    except requests.exceptions.RequestException as e:
        log(f"Network error calling VK API: {e}", 'ERROR')
        return None
    
    except Exception as e:
        log(f"Unexpected error calling VK API: {e}", 'ERROR')
        return None


def resolve_vk_group(group_input: str) -> Optional[int]:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –≤ —á–∏—Å–ª–æ–≤–æ–π ID
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
    - –ß–∏—Å–ª–æ–≤–æ–π ID: 12345678
    - –° –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏: club12345678, public12345678, -12345678
    - Screen name: parfenchikov_karelia
    - –ü–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://vk.com/parfenchikov_karelia
    
    Returns:
        –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –≥—Ä—É–ø–ø—ã –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    group_input = group_input.strip()
    
    # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫ –º–∏–Ω—É—Å, –µ—Å–ª–∏ –µ—Å—Ç—å
    if group_input.startswith('-'):
        group_input = group_input[1:]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã club/public
    if group_input.startswith('club') or group_input.startswith('public'):
        match = re.match(r'(club|public)(\d+)', group_input)
        if match:
            return int(match.group(2))
    
    # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å—Ç–æ–µ —á–∏—Å–ª–æ
    if group_input.isdigit():
        return int(group_input)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º screen_name –∏–∑ URL
    url_match = re.match(r'https?://vk\.com/([a-zA-Z0-9_]+)', group_input)
    if url_match:
        group_input = url_match.group(1)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º utils.resolveScreenName –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID
    log(f"Resolving screen name: {group_input}")
    response = vk_api_call('utils.resolveScreenName', {'screen_name': group_input})
    
    if response and response.get('type') == 'group':
        group_id = response.get('object_id')
        log(f"Resolved to group ID: {group_id}")
        return group_id
    
    log(f"Failed to resolve group: {group_input}", 'ERROR')
    return None


def get_wall_posts(group_id: int, count: int = 10) -> List[Dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã —Å–æ —Å—Ç–µ–Ω—ã –≥—Ä—É–ø–ø—ã
    
    Args:
        group_id: ID –≥—Ä—É–ø–ø—ã (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)
        count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
    
    Returns:
        –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤
    """
    owner_id = -abs(group_id)  # –î–ª—è –≥—Ä—É–ø–ø –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ID
    
    response = vk_api_call('wall.get', {
        'owner_id': owner_id,
        'count': count,
        'filter': 'owner'  # –¢–æ–ª—å–∫–æ –ø–æ—Å—Ç—ã –æ—Ç –∏–º–µ–Ω–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
    })
    
    if not response:
        return []
    
    posts = response.get('items', [])
    log(f"Fetched {len(posts)} posts from group {group_id}")
    
    return posts


def get_post_comments(owner_id: int, post_id: int, count: int = 20) -> List[Dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É
    
    Args:
        owner_id: ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å—Ç–µ–Ω—ã (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –¥–ª—è –≥—Ä—É–ø–ø)
        post_id: ID –ø–æ—Å—Ç–∞
        count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
    
    Returns:
        –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    """
    response = vk_api_call('wall.getComments', {
        'owner_id': owner_id,
        'post_id': post_id,
        'count': count,
        'sort': 'desc',  # –°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ
        'need_likes': 0,
        'extended': 1  # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    })
    
    if not response:
        return []
    
    comments = response.get('items', [])
    profiles = response.get('profiles', [])
    groups = response.get('groups', [])
    
    # –°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—è–º
    profiles_dict = {profile['id']: profile for profile in profiles}
    groups_dict = {group['id']: group for group in groups}
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ –∫ –∫–∞–∂–¥–æ–º—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
    for comment in comments:
        from_id = comment.get('from_id')
        if from_id > 0:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            comment['author_info'] = profiles_dict.get(from_id, {})
        else:  # –ì—Ä—É–ø–ø–∞
            comment['author_info'] = groups_dict.get(abs(from_id), {})
    
    return comments


def format_telegram_message(comment: Dict, post_url: str, group_name: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    
    Args:
        comment: –û–±—ä–µ–∫—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–∑ VK API
        post_url: –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç
        group_name: –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
    """
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ
    author_info = comment.get('author_info', {})
    from_id = comment.get('from_id', 0)
    
    if from_id > 0:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        first_name = author_info.get('first_name', 'Unknown')
        last_name = author_info.get('last_name', 'User')
        author_name = f"{first_name} {last_name}"
        author_url = f"https://vk.com/id{from_id}"
    else:  # –ì—Ä—É–ø–ø–∞/—Å–æ–æ–±—â–µ—Å—Ç–≤–æ
        author_name = author_info.get('name', 'Unknown Group')
        author_url = f"https://vk.com/club{abs(from_id)}"
    
    # –í—Ä–µ–º—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (timestamp –≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    timestamp = comment.get('date', 0)
    dt = datetime.fromtimestamp(timestamp)
    time_str = dt.strftime('%H:%M %d.%m.%Y')
    
    # –¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    text = comment.get('text', '[–±–µ–∑ —Ç–µ–∫—Å—Ç–∞]')
    
    # ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏
    comment_id = comment.get('id')
    owner_id = comment.get('post_owner_id')
    post_id = comment.get('post_id')
    comment_url = f"https://vk.com/wall{owner_id}_{post_id}?reply={comment_id}"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"""üí¨ <b>–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ {group_name}</b>

üìÑ <b>–ü–æ—Å—Ç:</b> <a href="{post_url}">–ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É</a>
üë§ <b>–ê–≤—Ç–æ—Ä:</b> <a href="{author_url}">{author_name}</a>
üïê <b>–í—Ä–µ–º—è:</b> {time_str}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí≠ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>
{text}

üîó <a href="{comment_url}">–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é</a>"""
    
    return message


def send_telegram_message(message: str, retry_count: int = 3) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    
    Args:
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (HTML-—Ä–∞–∑–º–µ—Ç–∫–∞)
        retry_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ 429
    
    Returns:
        True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    
    params = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': message,
        'parse_mode': 'HTML',
        'disable_web_page_preview': False
    }
    
    for attempt in range(retry_count):
        try:
            response = requests.post(url, json=params, timeout=10)
            
            if response.status_code == 429:
                # Rate limit exceeded
                retry_after = response.json().get('parameters', {}).get('retry_after', 5)
                log(f"Telegram rate limit hit, waiting {retry_after} seconds", 'WARNING')
                time.sleep(retry_after)
                continue
            
            response.raise_for_status()
            return True
        
        except requests.exceptions.RequestException as e:
            log(f"Error sending Telegram message (attempt {attempt + 1}/{retry_count}): {e}", 'ERROR')
            if attempt < retry_count - 1:
                time.sleep(2)
    
    return False


def get_group_info(group_id: int) -> Dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
    
    Args:
        group_id: ID –≥—Ä—É–ø–ø—ã
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥—Ä—É–ø–ø–µ
    """
    response = vk_api_call('groups.getById', {
        'group_id': group_id
    })
    
    if response and len(response) > 0:
        return response[0]
    
    return {'name': 'Unknown Group'}


def process_comments(group_id: int, group_name: str):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    
    Args:
        group_id: ID –≥—Ä—É–ø–ø—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        group_name: –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    """
    global is_first_run, seen_comments
    
    owner_id = -abs(group_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã
    posts = get_wall_posts(group_id, POSTS_TO_CHECK)
    
    if not posts:
        log("No posts fetched, skipping cycle", 'WARNING')
        return
    
    new_comments_count = 0
    
    for post in posts:
        post_id = post.get('id')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –ø–æ—Å—Ç–∞
        post_url = f"https://vk.com/wall{owner_id}_{post_id}"
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É
        comments = get_post_comments(owner_id, post_id, COMMENTS_PER_POST)
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ VK API
        time.sleep(REQUEST_DELAY)
        
        if not comments:
            continue
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º –∏–∑-–∑–∞ sort=desc)
        for comment in comments:
            comment_id = comment.get('id')
            
            if comment_id in seen_comments:
                continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º ID –≤ –∫—ç—à
            seen_comments.add(comment_id)
            
            # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if is_first_run:
                continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            comment['post_owner_id'] = owner_id
            comment['post_id'] = post_id
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            message = format_telegram_message(comment, post_url, group_name)
            
            if send_telegram_message(message):
                new_comments_count += 1
                log(f"Sent notification for comment {comment_id} on post {post_id}")
            else:
                log(f"Failed to send notification for comment {comment_id}", 'ERROR')
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ Telegram (1.2 —Å–µ–∫—É–Ω–¥—ã)
            time.sleep(1.2)
    
    # –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞ —Å–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥
    if is_first_run:
        is_first_run = False
        log(f"Initialization complete. Loaded {len(seen_comments)} existing comments into cache.")
        log("Now monitoring for NEW comments...")
    elif new_comments_count > 0:
        log(f"Processed {new_comments_count} new comments")
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞
    if len(seen_comments) > CACHE_LIMIT:
        log(f"Cache size exceeded {CACHE_LIMIT}, clearing cache", 'WARNING')
        seen_comments.clear()


def validate_config() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    
    Returns:
        True –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞, False –∏–Ω–∞—á–µ
    """
    required_vars = {
        'VK_ACCESS_TOKEN': VK_ACCESS_TOKEN,
        'VK_GROUP_ID': VK_GROUP_ID,
        'TELEGRAM_BOT_TOKEN': TELEGRAM_BOT_TOKEN,
        'TELEGRAM_CHAT_ID': TELEGRAM_CHAT_ID
    }
    
    missing_vars = [name for name, value in required_vars.items() if not value]
    
    if missing_vars:
        log(f"Missing required environment variables: {', '.join(missing_vars)}", 'ERROR')
        return False
    
    return True


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    log("=" * 60)
    log("VK Comment Monitor Starting...")
    log("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not validate_config():
        log("Configuration validation failed. Please check your .env file.", 'ERROR')
        return
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≥—Ä—É–ø–ø—É –≤ —á–∏—Å–ª–æ–≤–æ–π ID
    group_id = resolve_vk_group(VK_GROUP_ID)
    
    if not group_id:
        log(f"Failed to resolve VK group: {VK_GROUP_ID}", 'ERROR')
        log("Please check VK_GROUP_ID in your .env file.", 'ERROR')
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
    group_info = get_group_info(group_id)
    group_name = group_info.get('name', 'Unknown Group')
    
    log(f"Monitoring group: {group_name} (ID: {group_id})")
    log(f"Parameters: {POSTS_TO_CHECK} posts √ó {COMMENTS_PER_POST} comments")
    log(f"Check interval: {CHECK_INTERVAL} seconds")
    log("=" * 60)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    cycle_count = 0
    
    try:
        while True:
            cycle_count += 1
            log(f"--- Cycle #{cycle_count} ---")
            
            try:
                process_comments(group_id, group_name)
            except Exception as e:
                log(f"Error in processing cycle: {e}", 'ERROR')
            
            log(f"Sleeping for {CHECK_INTERVAL} seconds...")
            time.sleep(CHECK_INTERVAL)
    
    except KeyboardInterrupt:
        log("\nShutdown requested by user (Ctrl+C)")
        log(f"Total cycles completed: {cycle_count}")
        log(f"Total comments tracked: {len(seen_comments)}")
        log("VK Comment Monitor stopped.")


if __name__ == '__main__':
    main()

